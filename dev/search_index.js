var documenterSearchIndex = {"docs":
[{"location":"#SparseMatricesCSR.jl-1","page":"Home","title":"SparseMatricesCSR.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [SparseMatricesCSR]","category":"page"},{"location":"#SparseMatricesCSR.SparseMatricesCSR","page":"Home","title":"SparseMatricesCSR.SparseMatricesCSR","text":"This module contains:\n\nData types:\nSparseMatrixCSR:Compressed Sparse Row (CSR) sparse matrix implementation with Bi-based indexing.\nSymSparseMatrixCSR: Symmetric Compressed Sparse Row sparse matrix implementation with Bi-based indexing.\nProcedures:\npush_coo!: Helper function to build COO arrays for further building a SparseMatrix\nfinalize_coo!: Finalization of COO arrays building.\nsparsecsr: Analogous method to sparse function to build a SparseMatrixCSR.\nsymsparsecsr: Analogous method to sparse function to build a SymSparseMatrixCSR.\ncolvals: Analogous method to rowvals to return colvals array.\nhasrowmajororder: Return true if matrix values are ordered by row.\nhascolmajororder: Return true if matrix values are ordered by column.\ngetptr: Return the pointer array of a SparseMatrix (rowptr or colptr depending on the SparseMatrix type)\ngetindices: Return the indices array of a SparseMatrix (rowval or colval depending on the SparseMatrix type)\nOverloaded procedures:\n*: SparseMatrix-Vector product.\nmul!: SparseMatrix-Vector product.\nnnz: Return the number of stored (filled) elements in a sparse array.\nnonzeros: Return nzval array.\nnzrange: Return the range of indices for a particular row or column (Depending on the SparseMatrix type)\nfindnz: Return a tuple (I, J, V) where I and J are the row and column indices.\nrowvals: Return row indices or raises an error (Depending on the SparseMatrix type)\n\n\n\n\n\n","category":"module"},{"location":"#SparseMatricesCSR.SparseMatrixCSR","page":"Home","title":"SparseMatricesCSR.SparseMatrixCSR","text":"struct SparseMatrixCSR{Bi,Tv,Ti<:Integer} <: AbstractSparseMatrix{Tv,Ti}\n\nMatrix type for storing Bi-based sparse matrices  in the Compressed Sparse Row format. The standard  way of constructing SparseMatrixCSR is through the  sparsecsr function.\n\n\n\n\n\n","category":"type"},{"location":"#SparseMatricesCSR.SymSparseMatrixCSR","page":"Home","title":"SparseMatricesCSR.SymSparseMatrixCSR","text":"struct SymSparseMatrixCSR{T,Ti<:Integer} <: AbstractSparseMatrix{T,Ti}\n\nMatrix type for storing symmetric sparse matrices in the Compressed Sparse Row format. The standard way of constructing SparseMatrixCSR is through the  symsparsecsr function.\n\n\n\n\n\n","category":"type"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(I,J,V,m,n)\n\nFinalize COO arrays for building a SparseMatrixCSC.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Type{SparseArrays.SparseMatrixCSC},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(::Type{SparseMatrixCSC},I,J,V,m,n)\n\nCheck and insert diagonal entries in COO vectors if needed.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Type{SparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(::Type{SparseMatrixCSR},I,J,V,m,n)\n\nFinalize COO arrays for building a SparseMatrixCSR.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Type{SymSparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(::Type{SymSparseMatrixCSR},I,J,V,m,n)\n\nFinalize COO arrays for building a SymSparseMatrixCSR. Check and insert diagonal entries in COO vectors if needed.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.getindices-Tuple{SparseArrays.SparseMatrixCSC}","page":"Home","title":"SparseMatricesCSR.getindices","text":"function getvals(S::SparseMatrixCSC)\n\nReturn row indices.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.getindices-Tuple{SparseMatrixCSR}","page":"Home","title":"SparseMatricesCSR.getindices","text":"function getindices(S::SparseMatrixCSR)\n\nReturn column indices.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.getindices-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseMatricesCSR.getindices","text":"function getindices(S::SymSparseMatrixCSR)\n\nReturn column indices.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.getptr-Tuple{SparseArrays.SparseMatrixCSC}","page":"Home","title":"SparseMatricesCSR.getptr","text":"function getptr(S::SparseMatrixCSC)\n\nReturn columns pointer.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.getptr-Tuple{SparseMatrixCSR}","page":"Home","title":"SparseMatricesCSR.getptr","text":"function getptr(S::SparseMatrixCSR)\n\nReturn rows pointer.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.getptr-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseMatricesCSR.getptr","text":"function getptr(S::SymSparseMatrixCSR)\n\nReturn rows pointer.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.hascolmajororder-Tuple{Type{SparseArrays.SparseMatrixCSC}}","page":"Home","title":"SparseMatricesCSR.hascolmajororder","text":"function hascolmajororder(::Type{SparseMatrixCSC})\n\nCheck if values are stored in col-major order. Return true.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.hascolmajororder-Tuple{Type{SparseMatrixCSR}}","page":"Home","title":"SparseMatricesCSR.hascolmajororder","text":"function hascolmajororder(::Type{SparseMatrixCSR})\n\nCheck if values are stored in col-major order. Return false.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.hascolmajororder-Tuple{Type{SymSparseMatrixCSR}}","page":"Home","title":"SparseMatricesCSR.hascolmajororder","text":"function hascolmajororder(::Type{SymSparseMatrixCSR})\n\nCheck if values are stored in col-major order. Return false.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.hasrowmajororder-Tuple{Type{SparseArrays.SparseMatrixCSC}}","page":"Home","title":"SparseMatricesCSR.hasrowmajororder","text":"function hasrowmajororder(::Type{SparseMatrixCSC})\n\nCheck if values are stored in row-major order. Return false.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.hasrowmajororder-Tuple{Type{SparseMatrixCSR}}","page":"Home","title":"SparseMatricesCSR.hasrowmajororder","text":"function hasrowmajororder(::Type{SparseMatrixCSR})\n\nCheck if values are stored in row-major order. Return true.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.hasrowmajororder-Tuple{Type{SymSparseMatrixCSR}}","page":"Home","title":"SparseMatricesCSR.hasrowmajororder","text":"function hasrowmajororder(::Type{SymSparseMatrixCSR})\n\nCheck if values are stored in row-major order. Return true.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Tuple{Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SparseMatrixCSC.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Tuple{Type{SparseArrays.SparseMatrixCSC},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(::Type{SparseMatrixCSC},I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SparseMatrixCSC.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Tuple{Type{SymSparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(::Type{SymSparseMatrixCSR},I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SymSparseMatrixCSR. It stores only the upper triangle, ignoring entries with (ik>jk) coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Union{Tuple{Bi}, Tuple{Type{SparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}} where Bi","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(::Type{SparseMatrixCSR},I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SparseMatrixCSR.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.sparsecsr-Tuple{Any,Any,Vararg{Any,N} where N}","page":"Home","title":"SparseMatricesCSR.sparsecsr","text":"sparsecsr(I, J, V, [m, n, combine])\n\nCreate a sparse matrix S of dimensions m x n such that S[I[k], J[k]] = V[k].  The combine function is used to combine duplicates.  If m and n are not specified, they are set to  maximum(I) and maximum(J) respectively.  If the combine function is not supplied, combine defaults to +  unless the elements of V are Booleans in which case combine defaults to |.  All elements of I must satisfy 1 <= I[k] <= m,  and all elements of J must satisfy 1 <= J[k] <= n.  Numerical zeros in (I, J, V) are retained as structural nonzeros.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.symsparsecsr-Union{Tuple{Bi}, Tuple{Type{SymSparseMatrixCSR{Bi,T,Ti} where Ti<:Integer where T},Any,Any,Any,Vararg{Any,N} where N}} where Bi","page":"Home","title":"SparseMatricesCSR.symsparsecsr","text":"symsparsecsr(I, J, V, [m, n, combine])\n\nCreate a Symmetric sparse matrix S of dimensions m x n  such that S[I[k], J[k]] = V[k], and m=n.  The combine function is used to combine duplicates.  If m and n are not specified, they are set to  maximum(I) and maximum(J) respectively.  If the combine function is not supplied, combine defaults to +. All elements of I must satisfy 1 <= I[k] <= m,  and all elements of J must satisfy 1 <= J[k] <= n.  Numerical zeros in (I, J, V) are retained as structural nonzeros.\n\n\n\n\n\n","category":"method"},{"location":"#Base.count-Tuple{Any,SparseMatrixCSR}","page":"Home","title":"Base.count","text":"count(pred, S::SparseMatrixCSR) -> Integer\n\nCount the number of elements in nonzeros(S) for which predicate pred returns true. \n\n\n\n\n\n","category":"method"},{"location":"#Base.count-Tuple{Any,SymSparseMatrixCSR}","page":"Home","title":"Base.count","text":"count(pred, S::SymSparseMatrixCSR) -> Integer\n\nCount the number of elements in nonzeros(S) for which predicate pred returns true. \n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.mul!-Union{Tuple{T}, Tuple{AbstractArray{T,1} where T,SparseMatrixCSR,AbstractArray{T,1}}} where T","page":"Home","title":"LinearAlgebra.mul!","text":"function mul!(y::AbstractVector,A::SparseMatrixCSR,v::AbstractVector{T}) where {T}\n\nCalculates the matrix-vector product Av and stores the result in y, overwriting the existing value of y. \n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.mul!-Union{Tuple{T}, Tuple{AbstractArray{T,1} where T,SymSparseMatrixCSR,AbstractArray{T,1}}} where T","page":"Home","title":"LinearAlgebra.mul!","text":"function mul!(y::AbstractVector,A::SymSparseMatrixCSR,v::AbstractVector{T}) where {T}\n\nCalculates the matrix-vector product Av and stores the result in y, overwriting the existing value of y. \n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.findnz-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseArrays.findnz","text":"findnz(S::SymSparseMatrixCSR)\n\nReturn a tuple (I, J, V) where I and J are the row and column indices  of the stored (\"structurally non-zero\") values in sparse matrix A,  and V is a vector of the values.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.findnz-Union{Tuple{SparseMatrixCSR{Bi,Tv,Ti}}, Tuple{Ti}, Tuple{Tv}, Tuple{Bi}} where Ti where Tv where Bi","page":"Home","title":"SparseArrays.findnz","text":"function findnz(S::SparseMatrixCSR{Bi,Tv,Ti})\n\nReturn a tuple (I, J, V) where I and J are the row and column indices  of the stored (\"structurally non-zero\") values in sparse matrix A,  and V is a vector of the values.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nnz-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseArrays.nnz","text":"nnz(S::SymSparseMatrixCSR)\n\nReturns the number of stored (filled) elements in a sparse array.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nnz-Union{Tuple{SparseMatrixCSR{Bi,Tv,Ti} where Ti where Tv}, Tuple{Bi}} where Bi","page":"Home","title":"SparseArrays.nnz","text":"nnz(S::SparseMatrixCSR{Bi}) where {Bi}\n\nReturns the number of stored (filled) elements in a sparse array.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nonzeros-Tuple{SparseMatrixCSR}","page":"Home","title":"SparseArrays.nonzeros","text":"nonzeros(S::SparseMatrixCSR)\n\nReturn a vector of the structural nonzero values in sparse array S.  This includes zeros that are explicitly stored in the sparse array.  The returned vector points directly to the internal nonzero storage of S,  and any modifications to the returned vector will mutate S as well.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nonzeros-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseArrays.nonzeros","text":"nonzeros(S::SymSparseMatrixCSR)\n\nReturn a vector of the structural nonzero values in sparse array S.  This includes zeros that are explicitly stored in the sparse array.  The returned vector points directly to the internal nonzero storage of A,  and any modifications to the returned vector will mutate A as well.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nzrange-Tuple{SymSparseMatrixCSR,Integer}","page":"Home","title":"SparseArrays.nzrange","text":"nzrange(S::SymSparseMatrixCSR, row::Integer)\n\nReturn the range of indices to the structural nonzero values of a  sparse matrix row. \n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nzrange-Union{Tuple{Bi}, Tuple{SparseMatrixCSR{Bi,Tv,Ti} where Ti where Tv,Integer}} where Bi","page":"Home","title":"SparseArrays.nzrange","text":"nzrange(S::SparseMatrixCSR{Bi}, row::Integer) where {Bi}\n\nReturn the range of indices to the structural nonzero values of a  sparse matrix row. \n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.rowvals-Tuple{SparseMatrixCSR}","page":"Home","title":"SparseArrays.rowvals","text":"rowvals(S::SparseMatrixCSR)\n\nReturn an error.  CSR sparse matrices does not contain raw row values. It contains row pointers instead that can be accessed by using nzrange.\n\n\n\n\n\n","category":"method"}]
}
