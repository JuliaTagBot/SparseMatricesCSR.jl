var documenterSearchIndex = {"docs":
[{"location":"#SparseMatricesCSR.jl-1","page":"Home","title":"SparseMatricesCSR.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [SparseMatricesCSR]","category":"page"},{"location":"#SparseMatricesCSR.SparseMatrixCSR","page":"Home","title":"SparseMatricesCSR.SparseMatrixCSR","text":"struct SparseMatrixCSR{T,Ti<:Integer} <: AbstractSparseMatrix{T,Ti}\n\nMatrix type for storing sparse matrices in the Compressed Sparse Row format. The standard way of constructing SparseMatrixCSR is through the  sparsecsr function.\n\n\n\n\n\n","category":"type"},{"location":"#SparseMatricesCSR.SymSparseMatrixCSR","page":"Home","title":"SparseMatricesCSR.SymSparseMatrixCSR","text":"struct SymSparseMatrixCSR{T,Ti<:Integer} <: AbstractSparseMatrix{T,Ti}\n\nMatrix type for storing symmetric sparse matrices in the Compressed Sparse Row format. The standard way of constructing SparseMatrixCSR is through the  symsparsecsr function.\n\n\n\n\n\n","category":"type"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(I,J,V,m,n)\n\nCheck and insert diagonal entries in COO vectors if needed.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Type{SparseArrays.SparseMatrixCSC},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(::Type{SparseMatrixCSC},I,J,V,m,n)\n\nCheck and insert diagonal entries in COO vectors if needed.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Type{SparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(::Type{SparseMatrixCSR},I,J,V,m,n)\n\nCheck and insert diagonal entries in COO vectors if needed.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.finalize_coo!-Tuple{Type{SymSparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer}","page":"Home","title":"SparseMatricesCSR.finalize_coo!","text":"function finalize_coo!(::Type{SymSparseMatrixCSR},I,J,V,m,n)\n\nCheck and insert diagonal entries in COO vectors if needed.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Tuple{Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SparseMatrixCSC.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Tuple{Type{SparseArrays.SparseMatrixCSC},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(::Type{SparseMatrixCSC},I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SparseMatrixCSC.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Tuple{Type{SparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(::Type{SparseMatrixCSR},I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SparseMatrixCSR.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.push_coo!-Tuple{Type{SymSparseMatrixCSR},Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Integer,Integer,Number}","page":"Home","title":"SparseMatricesCSR.push_coo!","text":"function push_coo!(::Type{SymSparseMatrixCSR},I,J,V,ik,jk,vk)\n\nInserts entries in COO vectors for further building a SymSparseMatrixCSR. It stores only the upper triangle, ignoring entries with (ik>jk) coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.sparsecsr-Tuple{Any,Any,Vararg{Any,N} where N}","page":"Home","title":"SparseMatricesCSR.sparsecsr","text":"sparsecsr(I, J, V, [m, n, combine])\n\nCreate a sparse matrix S of dimensions m x n such that S[I[k], J[k]] = V[k].  The combine function is used to combine duplicates.  If m and n are not specified, they are set to  maximum(I) and maximum(J) respectively.  If the combine function is not supplied, combine defaults to +  unless the elements of V are Booleans in which case combine defaults to |.  All elements of I must satisfy 1 <= I[k] <= m,  and all elements of J must satisfy 1 <= J[k] <= n.  Numerical zeros in (I, J, V) are retained as structural nonzeros;  to drop numerical zeros, use dropzeros!.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatricesCSR.symsparsecsr-Tuple{Any,Any,Any,Vararg{Any,N} where N}","page":"Home","title":"SparseMatricesCSR.symsparsecsr","text":"symsparsecsr(I, J, V, [m, n, combine])\n\nCreate a Symmetric sparse matrix S of dimensions m x n  such that S[I[k], J[k]] = V[k], and m=n.  The combine function is used to combine duplicates.  If m and n are not specified, they are set to  maximum(I) and maximum(J) respectively.  If the combine function is not supplied, combine defaults to +. All elements of I must satisfy 1 <= I[k] <= m,  and all elements of J must satisfy 1 <= J[k] <= n.  Numerical zeros in (I, J, V) are retained as structural nonzeros;  to drop numerical zeros, use dropzeros!.\n\n\n\n\n\n","category":"method"},{"location":"#Base.count-Tuple{Any,SparseMatrixCSR}","page":"Home","title":"Base.count","text":"count(pred, S::SparseMatrixCSR) -> Integer\n\nCount the number of elements in S for which predicate pred returns true. \n\n\n\n\n\n","category":"method"},{"location":"#Base.count-Tuple{Any,SymSparseMatrixCSR}","page":"Home","title":"Base.count","text":"count(pred, S::SymSparseMatrixCSR) -> Integer\n\nCount the number of elements in S for which predicate pred returns true. \n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.findnz-Tuple{SparseMatrixCSR}","page":"Home","title":"SparseArrays.findnz","text":"findnz(S::SparseMatrixCSR)\n\nReturn a tuple (I, J, V) where I and J are the row and column indices  of the stored (\"structurally non-zero\") values in sparse matrix A,  and V is a vector of the values.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.findnz-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseArrays.findnz","text":"findnz(S::SymSparseMatrixCSR)\n\nReturn a tuple (I, J, V) where I and J are the row and column indices  of the stored (\"structurally non-zero\") values in sparse matrix A,  and V is a vector of the values.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nnz-Tuple{SparseMatrixCSR}","page":"Home","title":"SparseArrays.nnz","text":"nnz(S::SparseMatrixCSR)\n\nReturns the number of stored (filled) elements in a sparse array.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nnz-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseArrays.nnz","text":"nnz(S::SymSparseMatrixCSR)\n\nReturns the number of stored (filled) elements in a sparse array.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nonzeros-Tuple{SparseMatrixCSR}","page":"Home","title":"SparseArrays.nonzeros","text":"nonzeros(S::SparseMatrixCSR)\n\nReturn a vector of the structural nonzero values in sparse array S.  This includes zeros that are explicitly stored in the sparse array.  The returned vector points directly to the internal nonzero storage of A,  and any modifications to the returned vector will mutate A as well.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nonzeros-Tuple{SymSparseMatrixCSR}","page":"Home","title":"SparseArrays.nonzeros","text":"nonzeros(S::SymSparseMatrixCSR)\n\nReturn a vector of the structural nonzero values in sparse array S.  This includes zeros that are explicitly stored in the sparse array.  The returned vector points directly to the internal nonzero storage of A,  and any modifications to the returned vector will mutate A as well.\n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nzrange-Tuple{SparseMatrixCSR,Integer}","page":"Home","title":"SparseArrays.nzrange","text":"nzrange(S::SparseMatrixCSR, row::Integer\n\nReturn the range of indices to the structural nonzero values of a  sparse matrix row. \n\n\n\n\n\n","category":"method"},{"location":"#SparseArrays.nzrange-Tuple{SymSparseMatrixCSR,Integer}","page":"Home","title":"SparseArrays.nzrange","text":"nzrange(S::SymSparseMatrixCSR, row::Integer)\n\nReturn the range of indices to the structural nonzero values of a  sparse matrix row. \n\n\n\n\n\n","category":"method"}]
}
